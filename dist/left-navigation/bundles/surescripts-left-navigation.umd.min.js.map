{"version":3,"sources":["ng://@surescripts/left-navigation/lib/left-navigation.service.ts","ng://@surescripts/left-navigation/lib/left-navigation.component.ts","ng://@surescripts/left-navigation/lib/nav-item.model.ts","ng://@surescripts/left-navigation/lib/left-navigation.module.ts"],"names":["LeftNavigationService","this","items","EventEmitter","toggle","header","displayFooter","collapsed","prototype","init","_this","emit","subscribe","Injectable","args","providedIn","NgModule","Output","LeftNavigationComponent","leftNavService","router","displayNav","highlightLinks","display","length","isLinkActive","item","charPos","url","indexOf","queryParams","tree","createUrlTree","startsWith","toString","slice","Component","selector","template","Router","Input","NavItemIcon","Object","assign","Link","Heading","HR","Function","NavItemLink","relative","target","NavItem","onClick","noop","icon","itemType","NavItemType","link","undefined","NavHeading","LeftNavigationModule","library","addIcons","faChevronLeft","faChevronRight","forRoot","ngModule","providers","imports","CommonModule","FontAwesomeModule","RouterModule","declarations","exports","FaIconLibrary"],"mappings":"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","sourcesContent":["import { Injectable, Output, EventEmitter, NgModule } from '@angular/core';\r\nimport { NavItem, NavHeading } from './nav-item.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n@NgModule()\r\nexport class LeftNavigationService {\r\n    @Output() items: EventEmitter<Array<NavItem>> = new EventEmitter();\r\n    @Output() toggle: EventEmitter<boolean> = new EventEmitter();\r\n    @Output() header: EventEmitter<NavHeading> = new EventEmitter();\r\n    @Output() displayFooter: EventEmitter<boolean> = new EventEmitter();\r\n    collapsed = false;\r\n    init(header?: NavHeading, items?: Array<NavItem>, displayFooter?: boolean) {\r\n        if (displayFooter === null || displayFooter === undefined) {\r\n            displayFooter = true;\r\n        }\r\n        this.header.emit(header);\r\n        this.items.emit(items);\r\n        this.displayFooter.emit(displayFooter);\r\n        this.toggle.subscribe((collapsed: boolean) => { this.collapsed = collapsed; });\r\n    }\r\n}","import { Component, Input } from '@angular/core';\r\nimport { NavItem, NavHeading, NavItemLink } from './nav-item.model';\r\nimport { LeftNavigationService } from './left-navigation.service';\r\n// import { faChevronLeft, faChevronRight, IconDefinition } from '@fortawesome/free-solid-svg-icons';\r\nimport {  Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'surescripts-left-navigation',\r\n    templateUrl: './left-navigation.component.html'\r\n})\r\nexport class LeftNavigationComponent {\r\n    // faChevronLeft: IconDefinition = faChevronLeft;\r\n    // faChevronRight: IconDefinition = faChevronRight;\r\n    items: Array<NavItem>;\r\n    header: NavHeading;\r\n    collapsed = false;\r\n    displayNav = false;\r\n    displayFooter = true;\r\n    @Input()\r\n    highlightLinks = true;\r\n\r\n    constructor(private leftNavService: LeftNavigationService, private router: Router) {\r\n        this.leftNavService.displayFooter.subscribe((display: boolean) => {\r\n            this.displayFooter = display;\r\n        });\r\n\r\n        this.leftNavService.items.subscribe((items: Array<NavItem>) => {\r\n            if (items && items.length > 0) {\r\n                this.items = items;\r\n                this.displayNav = true;\r\n            } else {\r\n                this.displayNav = false;\r\n            }\r\n        });\r\n\r\n        this.leftNavService.header.subscribe((header: NavHeading) => {\r\n            if (header) {\r\n                this.header = header;\r\n            }\r\n        });\r\n    }\r\n\r\n    public isLinkActive(item: NavItemLink) {\r\n        const charPos = this.router.url.indexOf('?');\r\n        if (charPos > -1 && !item.queryParams) {\r\n            return false;\r\n        }\r\n        else if (item.queryParams) {\r\n            if (charPos === -1) {\r\n                return false;\r\n            }\r\n            const tree = this.router.createUrlTree([item.url], { queryParams: item.queryParams });\r\n            return this.router.url.startsWith(tree.toString());\r\n        }\r\n\r\n        const cleanUrl = charPos !== -1 ? this.router.url.slice(0, charPos) : this.router.url;\r\n        return cleanUrl === item.url;\r\n    }\r\n\r\n    toggle() {\r\n        this.collapsed = !this.collapsed;\r\n        this.leftNavService.toggle.emit(this.collapsed);\r\n    }\r\n}\r\n","import { noop } from 'rxjs';\r\n\r\nexport class NavItemIcon {\r\n    prefix: string;\r\n    name: string;\r\n    public constructor(init?: Partial<NavItemIcon>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport enum NavItemType {\r\n    Link = 'link',\r\n    Heading = 'heading',\r\n    HR = 'hr',\r\n    Function = 'fn'\r\n}\r\n\r\nexport class NavItemLink {\r\n    relative ? = true;\r\n    url: string;\r\n    target ? = '_self';\r\n    queryParams ?: {\r\n        [k: string]: any;\r\n    };\r\n    public constructor(init?: Partial<NavItemLink>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class NavItem {\r\n    text: string;\r\n    itemType: NavItemType;\r\n    icon: NavItemIcon;\r\n    link: NavItemLink;\r\n    onClick:  ($event: any) => void = noop;\r\n    selected: boolean;\r\n    id: string;\r\n    public constructor(init?: Partial<NavItem>) {\r\n        if (init) {\r\n            init.icon = new NavItemIcon(init.icon);\r\n            if (init.itemType === NavItemType.Function) {\r\n                init.link = undefined;\r\n                init.onClick = init.onClick || noop;\r\n            } else if (init.itemType === NavItemType.Link) {\r\n                init.onClick = undefined;\r\n                init.link = new NavItemLink(init.link);\r\n            }\r\n        }\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class NavHeading {\r\n    icon: NavItemIcon;\r\n    title: string;\r\n    public constructor(init?: Partial<NavItem>) {\r\n        if (init) {\r\n            init.icon = new NavItemIcon(init.icon);\r\n        }\r\n        Object.assign(this, init);\r\n    }\r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { LeftNavigationComponent } from './left-navigation.component';\r\nimport { LeftNavigationService } from './left-navigation.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FontAwesomeModule, FaIconLibrary } from '@fortawesome/angular-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FontAwesomeModule, RouterModule],\r\n  declarations: [LeftNavigationComponent],\r\n  exports: [LeftNavigationComponent]\r\n})\r\nexport class LeftNavigationModule {\r\n  constructor(library: FaIconLibrary) {\r\n    library.addIcons(faChevronLeft, faChevronRight);\r\n  }\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: LeftNavigationModule,\r\n      providers: [ LeftNavigationService ]\r\n    };\r\n  }\r\n}\r\n\r\nexport { NavHeading, NavItem, NavItemType, NavItemLink } from './nav-item.model';\r\nexport { LeftNavigationService } from './left-navigation.service';\r\n"]}