{"version":3,"sources":["ng://@surescripts/notifications/lib/notifications.service.ts","ng://@surescripts/notifications/lib/notification.model.ts","ng://@surescripts/notifications/lib/notifications.model.ts","ng://@surescripts/notifications/lib/notification-status.enum.ts","ng://@surescripts/notifications/lib/notifications.component.ts","ng://@surescripts/notifications/lib/notifications.module.ts"],"names":["NotificationsService","Injectable","args","providedIn","SurescriptsNotification","init","Object","assign","this","postedDate","Date","difference","getTime","minutes","Math","round","readablePostedDate","hours","floor","days","SurescriptsNotifications","items","map","x","Read","Unread","NotificationsComponent","http","router","faBell","unreadCount","SurescriptsNotificationStatus","prototype","ngOnInit","_this","ssoBaseUrl","Error","replace","pauser","BehaviorSubject","source","interval","pipe","startWith","exhaustMap","poll","switchMap","paused","NEVER","materialize","dematerialize","subscribe","events","event","NavigationEnd","next","finalize","unsubscribe","get","withCredentials","tap","resp","notifications","filter","status","length","itemClicked","item","put","id","dismiss","$event","index","indexOf","stopPropagation","splice","Component","selector","template","HttpClient","Router","Input","NotificationsModule","NgModule","imports","CommonModule","HttpClientModule","NgbDropdownModule","FontAwesomeModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationsService {\r\n\r\n  constructor() { }\r\n}\r\n","import { SurescriptsNotificationStatus } from './notification-status.enum';\r\nexport class SurescriptsNotification {\r\n    title: string;\r\n    summary: string;\r\n    id: string;\r\n    status: SurescriptsNotificationStatus;\r\n    postedDate: Date;\r\n    readablePostedDate: string;\r\n    public constructor(init?: Partial<SurescriptsNotification>) {\r\n        Object.assign(this, init);\r\n        this.postedDate = new Date(init.postedDate);\r\n        const difference = new Date().getTime() - this.postedDate.getTime();\r\n        if (difference <= 3600000) {\r\n            const minutes = Math.round(((difference % 86400000) % 3600000) / 60000);\r\n            if (minutes < 2) {\r\n                this.readablePostedDate = 'Moments ago';\r\n            } else {\r\n                this.readablePostedDate = `${minutes} minutes ago`;\r\n            }\r\n        } else if (difference <= 86400000) {\r\n            const hours = Math.floor((difference % 86400000) / 3600000);\r\n            if (hours < 2) {\r\n                this.readablePostedDate = `${hours} hour ago`;\r\n            } else {\r\n                this.readablePostedDate = `${hours} hours ago`;\r\n            }\r\n        } else if (difference <= 604800000) {\r\n            const days = Math.floor(difference / 86400000);\r\n            if (days < 2) {\r\n                this.readablePostedDate = `${days} day ago`;\r\n            } else {\r\n                this.readablePostedDate = `${days} days ago`;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { SurescriptsNotification } from './notification.model';\r\n\r\nexport class SurescriptsNotifications {\r\n    baseUrl: string;\r\n    items: Array<SurescriptsNotification>;\r\n    total: number;\r\n    public constructor(init?: Partial<SurescriptsNotifications>) {\r\n        Object.assign(this, init);\r\n        this.items = init.items.map(x => new SurescriptsNotification(x));\r\n    }\r\n}\r\n","export enum SurescriptsNotificationStatus {\r\n    Read = 'Read',\r\n    Unread = 'Unread'\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SurescriptsNotifications } from './notifications.model';\r\nimport { tap, exhaustMap, startWith, switchMap, finalize, dematerialize, materialize } from 'rxjs/operators';\r\nimport { faBell, IconDefinition } from '@fortawesome/free-solid-svg-icons';\r\nimport { SurescriptsNotification } from './notification.model';\r\nimport { SurescriptsNotificationStatus } from './notification-status.enum';\r\nimport { Observable, interval, BehaviorSubject, NEVER } from 'rxjs';\r\nimport { Router, NavigationEnd, Event } from '@angular/router';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'surescripts-notifications',\r\n  templateUrl: './notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss']\r\n})\r\nexport class NotificationsComponent implements OnInit {\r\n\r\n  faBell: IconDefinition = faBell;\r\n\r\n  @Input()\r\n  ssoBaseUrl: string;\r\n  notifications: SurescriptsNotifications;\r\n  unreadCount = 0;\r\n  SurescriptsNotificationStatus = SurescriptsNotificationStatus;\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    if (!this.ssoBaseUrl) {\r\n      throw new Error('\"ssoBaseUrl\" is required.');\r\n    }\r\n    this.ssoBaseUrl = this.ssoBaseUrl.replace(/\\/+$/, '');\r\n\r\n    const pauser = new BehaviorSubject(false);\r\n\r\n    // poll every hour.\r\n    const source = interval(3600000).pipe(\r\n      startWith(0),\r\n      exhaustMap(() => this.poll())\r\n    );\r\n\r\n    pauser.pipe(switchMap(\r\n      paused => paused ? NEVER : source.pipe(materialize())\r\n    ), dematerialize()).subscribe();\r\n\r\n    this.router.events.subscribe((event: Event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        // pause the poll and make a call. once finished, turn the poll on again and unsubscribe\r\n        pauser.next(true);\r\n        this.poll().pipe(finalize(() => {\r\n          pauser.next(false);\r\n        })).subscribe().unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private poll(): Observable<SurescriptsNotifications> {\r\n    return this.http.get<SurescriptsNotifications>(`${this.ssoBaseUrl}/app/v1/user/notifications`,\r\n    { withCredentials: true }).pipe(tap((resp: SurescriptsNotifications) => {\r\n      this.notifications = new SurescriptsNotifications(resp);\r\n      this.unreadCount = this.notifications.items.filter(x => x.status === SurescriptsNotificationStatus.Unread).length;\r\n    }));\r\n  }\r\n\r\n  itemClicked(item: SurescriptsNotification) {\r\n    if (item.status === SurescriptsNotificationStatus.Unread) {\r\n      this.http.put<SurescriptsNotification>(`${this.ssoBaseUrl}/app/v1/user/notifications/${item.id}/read`, null,\r\n      { withCredentials: true }).pipe(tap(() => {\r\n        item.status = SurescriptsNotificationStatus.Read;\r\n        this.unreadCount = this.unreadCount - 1;\r\n      })).subscribe();\r\n    }\r\n  }\r\n\r\n  dismiss($event: MouseEvent, item: SurescriptsNotification) {\r\n    const index = this.notifications.items.indexOf(item);\r\n    $event.stopPropagation();\r\n    if (index >= 0) {\r\n      this.http.put<SurescriptsNotification>(`${this.ssoBaseUrl}/app/v1/user/notifications/${item.id}/dismiss`, null,\r\n      { withCredentials: true }).pipe(tap(() => {\r\n        this.notifications.items.splice(index, 1);\r\n        if (item.status === SurescriptsNotificationStatus.Unread) {\r\n          this.unreadCount = this.unreadCount - 1;\r\n        }\r\n      })).subscribe();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NotificationsComponent } from './notifications.component';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    NgbDropdownModule,\r\n    FontAwesomeModule\r\n  ],\r\n  declarations: [NotificationsComponent],\r\n  exports: [NotificationsComponent]\r\n})\r\nexport class NotificationsModule { }\r\n\r\nexport { SurescriptsNotification } from './notification.model';\r\nexport { SurescriptsNotifications } from './notifications.model';\r\nexport { SurescriptsNotificationStatus } from './notification-status.enum';\r\n\r\n"]}